find
longest
common
subsequ
lc
classic
problem
field
comput
algorithm
diversifi
applic
domain
subsequ
string
anoth
string
deriv
origin
string
delet
none
charact
contigu
noncontigu
origin
string
longest
common
subsequ
two
given
string
string
longest
string
subsequ
string
sequenti
version
lc
algorithm
use
equalunequ
comparison
take
documentclass
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
varomega
left
text
mn
right
end
document
time
n
repres
length
two
sequenc
compar
necessari
mention
problem
find
lc
two
string
nphard
natur
lc
variou
applic
multipl
field
includ
dna
sequenc
align
bioinformat
speech
imag
recognit
file
comparison
optim
databas
queri
etc
field
bioinformat
pattern
discoveri
help
discov
common
pattern
among
dna
sequenc
interest
might
suggest
biolog
relat
among
eg
similar
biolog
function
discov
pattern
sequenc
lc
play
import
role
find
longest
common
region
two
sequenc
although
praiseworthi
amount
effort
made
task
pattern
discoveri
increas
sequenc
length
algorithm
seemingli
face
perform
bottleneck
furthermor
advent
nextgener
sequenc
technolog
sequenc
data
increas
rapidli
demand
algorithm
minimum
possibl
execut
time
parallel
algorithm
play
vital
role
regard
parallel
solut
lc
problem
antidiagon
bitparallel
algorithm
first
noteworthi
attempt
recent
rise
graphic
process
unit
gpu
base
acceler
sever
comput
unifi
devic
architectur
cuda
base
gpu
target
solut
lc
problem
propos
yang
et
al
one
first
propos
improv
rowwis
independ
parallel
version
lc
algorithm
chang
data
depend
use
dynam
program
approach
use
uniqu
memoryaccess
properti
gpu
recent
li
et
al
propos
parallel
formul
antidiagon
approach
lc
algorithm
use
gpubas
model
although
gpubas
model
offer
faster
execut
time
gpu
devic
still
quit
expens
natur
henc
comput
equip
gpu
case
achiev
perform
improv
cpubas
parallel
lc
algorithm
eg
messag
pass
interfac
mpi
open
multiprocess
openmp
still
greatli
demand
howev
best
knowledg
publicli
avail
cpubas
tool
end
user
address
gap
develop
new
openmpbas
tool
end
user
improv
rowwis
independ
version
lc
algorithm
moreov
also
develop
two
cpubas
parallel
implement
mpi
hybrid
mpiopenmp
algorithm
provid
detail
benchmark
implement
simul
real
dna
sequenc
data
absent
version
lc
algorithm
main
contribut
studi
list
belowa
new
openmpbas
publicli
avail
tool
find
length
lc
dna
sequenc
end
usersa
detail
benchmark
newli
develop
cpubas
parallel
algorithm
use
differ
perform
metric
simul
real
dna
sequenc
data
found
openmpbas
algorithm
provid
atleast
time
absolut
speedup
compar
best
sequenti
version
time
rel
speedup
compar
use
thread
comparison
newli
develop
openmpbas
lc
algorithm
without
branch
condit
yang
et
al
devis
rowwis
independ
parallel
algorithm
remov
depend
among
cell
row
modifi
equat
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
rleft
j
right
left
begin
array
quad
quad
quad
quad
quad
quad
quad
quad
quad
quad
quad
quad
quad
quad
quad
quad
j
rleft
j
right
quad
quad
quad
quad
quad
quad
quad
quad
aleft
right
bleft
j
right
text
max
left
rleft
j
right
rleft
j
k
right
right
quad
bleft
j
k
right
text
max
left
rleft
j
right
right
quad
quad
quad
quad
quad
quad
quad
quad
quad
quad
j
k
end
array
right
end
document
ri
j
documentclass
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
k
end
document
k
denot
number
step
requir
find
either
match
documentclass
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
text
left
text
right
text
b
left
text
j
text
k
right
end
document
aibjk
documentclass
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
text
j
text
k
end
document
yang
et
al
divid
algorithm
two
step
first
calcul
valu
documentclass
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
text
j
text
k
end
document
jk
everi
documentclass
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
end
document
store
valu
anoth
tabl
name
p
equat
calcul
valu
documentclass
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
p
end
document
p
given
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
pleft
j
right
left
begin
array
l
quad
quad
quad
quad
j
hfill
j
quad
quad
bleft
j
right
cleft
right
hfill
pleft
j
right
quad
otherwis
hfill
end
array
right
end
document
pi
documentclass
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
c
end
document
c
string
compris
uniqu
charact
string
documentclass
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
end
document
string
documentclass
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
b
end
document
b
valu
score
tabl
documentclass
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
r
end
document
r
calcul
use
follow
updat
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
rleft
j
right
left
begin
array
j
rleft
j
right
aleft
right
bleft
j
right
max
left
rleft
j
right
rleft
j
k
right
right
bleft
j
k
right
max
left
rleft
j
right
right
j
k
end
array
right
end
document
ri
j
c
denot
index
charact
documentclass
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
aleft
right
end
document
string
documentclass
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
c
end
document
c
branch
hamper
perform
parallel
algorithm
yang
et
al
modifi
calcul
documentclass
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
p
end
document
p
matrix
use
follow
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
pleft
j
right
left
begin
array
l
quad
quad
quad
quad
quad
j
hfill
jquad
quad
quad
quad
quad
quad
bleft
j
right
cleft
right
hfill
pleft
j
right
quad
quad
otherwis
hfill
end
array
right
end
document
pi
eq
rewritten
follow
one
branch
condit
minim
usepackag
amsmath
usepackag
wasysym
usepackag
amsfont
usepackag
amssymb
usepackag
amsbsi
usepackag
mathrsf
usepackag
upgreek
setlength
oddsidemargin
begin
document
rleft
j
right
left
begin
array
l
max
left
rleft
j
right
right
max
rleft
j
right
rleft
pleft
c
j
right
right
end
array
begin
array
l
ifi
ifpleft
c
j
right
otherwis
end
array
right
end
document
ri
j
pc
two
version
rowwis
independ
algorithm
see
calcul
valu
tabl
p
depend
row
contrast
calcul
valu
score
tabl
r
depend
previou
row
calcul
p
tabl
row
independ
calcul
parallel
way
therefor
mpi
implement
scatter
p
tabl
process
begin
calcul
correspond
chunk
valu
process
number
zero
gather
partial
result
process
calcul
score
tabl
r
element
row
scatter
among
process
gather
afterward
scatter
gather
oper
need
done
everi
row
henc
commun
synchron
overhead
expect
higher
mpi
implement
approach
share
memori
implement
larg
mitig
commun
synchron
overhead
distribut
memori
implement
inspir
us
develop
share
memori
openmp
implement
case
openmp
implement
use
workshar
construct
pragma
omp
parallel
openmp
direct
share
iter
loop
among
avail
thread
comput
element
singl
row
score
tabl
r
parallel
tri
differ
schedul
strategi
static
dynam
guid
share
work
among
thread
calcul
p
tabl
also
share
among
thread
time
outer
loop
parallel
use
pragma
omp
parallel
construct
everi
row
independ
hybrid
mpiopenmp
approach
select
optimum
number
process
thread
experi
mpi
openmp
approach
scatter
everi
row
among
process
insid
singl
process
share
chunk
row
among
thread
use
pragma
omp
parallel
account
longer
dna
sequenc
optim
space
complex
three
implement
kept
current
previou
row
score
tabl
use
two
differ
data
set
experi
first
one
simul
dna
sequenc
data
collect
univers
california
riversid
ucr
random
dna
sequenc
gener
length
differ
pair
sequenc
base
pair
base
pair
second
data
set
consist
viru
genom
sequenc
pair
two
entir
chromosom
genom
sequenc
pair
two
eukaryot
collect
websit
nation
center
biotechnolog
inform
ncbi
select
sequenc
length
vari
base
pair
base
pair
virus
base
pair
base
pair
eukaryot
tabl
repres
select
viru
eukaryot
pair
sequenc
length
experi
run
univers
manitoba
oncampu
cluster
comput
system
mercuri
machin
cluster
consist
four
fulli
connect
comput
node
ethernet
line
everi
pair
node
node
consist
two
intel
xeon
ghz
cpu
gb
ram
total
core
insid
help
hyperthread
node
capabl
run
twice
mani
hardwar
thread
thread
time
mpi
approach
tune
number
process
found
use
process
give
better
rel
speedup
openmp
approach
tune
number
thread
schedul
strategi
static
dynam
guid
found
use
thread
static
schedul
work
share
among
thread
provid
time
rel
speedup
see
fig
b
final
hybrid
mpiopenmp
approach
use
process
node
thread
comparison
purpos
experi
vari
number
sequenc
length
figur
illustr
execut
time
differ
implement
see
openmp
implement
outperform
approach
almost
time
faster
best
sequenti
version
howev
mpi
approach
provid
poor
result
due
increas
amount
commun
synchron
overhead
caus
scatter
gather
oper
block
natur
hybrid
mpiopenmp
approach
perform
worst
hybrid
approach
number
scatter
gather
oper
mpi
approach
also
add
synchron
overhead
openmp
therefor
implement
provid
worst
result
observ
indic
distribut
memori
implement
discourag
lc
algorithm
order
valid
result
also
experi
realdna
sequenc
data
see
tabl
fig
see
even
real
data
openmp
implement
atleast
time
speedup
best
sequenti
version
longer
dna
sequenc
sp
sp
fig
openmp
speedup
even
higher
wherea
mpi
hybrid
implement
took
week
complet
experi
use
version
without
branch
rowwis
independ
algorithm
order
compar
execut
time
two
version
version
version
also
develop
version
figur
illustr
execut
time
two
version
vari
sequenc
size
thread
see
version
perform
rel
better
version
algorithm
although
version
remov
branch
condit
ad
comput
might
reason
rel
bad
execut
time
furthermor
cpu
architectur
much
better
branch
predict
gpu
therefor
second
version
rowwis
independ
parallel
algorithm
perform
well
gpu
cpu
project
name
lc
row
parallel
cpu
project
home
page
http
githubcomrayhanshikderlcsparallel
oper
system
platform
independentprogram
languag
cother
requir
gcc
later
openmpi
version
later
openmp
version
laterlicens
mit
licenseani
restrict
use
nonacadem
none
