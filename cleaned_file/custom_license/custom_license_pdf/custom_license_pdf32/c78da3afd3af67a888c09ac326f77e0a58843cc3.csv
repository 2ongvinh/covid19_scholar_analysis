paper
consid
problem
acceler
numer
simul
time
depend
problem
time
domain
decomposit
avail
algorithm
enabl
decomposit
present
sever
effici
limit
obstacl
solut
larg
scale
high
dimension
problem
main
contribut
improv
parallel
effici
parar
time
method
parar
method
base
combin
predict
made
numer
inexpens
solver
coars
physic
andor
coars
resolut
correct
come
expens
solver
highfidel
physic
high
resolut
converg
algorithm
provid
solut
fine
solver
highfidel
physic
high
resolut
classic
version
fine
solver
fix
high
accuraci
major
obstacl
achiev
competit
parallel
effici
paper
develop
adapt
variant
overcom
obstacl
dynam
increas
accuraci
fine
solver
across
parar
iter
theoret
show
parallel
effici
becom
competit
ideal
case
cost
coars
solver
small
thu
prove
remain
factor
imped
full
scalabl
becom
cost
coars
solver
commun
time
develop
theori
also
merit
set
gener
framework
understand
success
sever
extens
parar
base
iter
improv
qualiti
fine
solver
reus
inform
previou
parar
step
illustr
actual
perform
method
stiff
ode
challeng
famili
problem
sinc
mechan
adapt
time
effici
affect
cost
coars
solver
j
u
r
n
l
p
r
e
p
r
f
journal
preproof
well
accept
commun
easili
applic
rel
larg
spectrum
problem
specif
difficulti
nevertheless
encount
certain
type
pde
report
eg
hyperbol
system
hamiltonian
problem
anoth
ingredi
success
even
though
scalabl
properti
limit
gener
competit
comparison
method
without
enter
specif
detail
algorithm
stage
summar
procedur
say
build
iter
sequenc
approxim
exact
solut
problem
predictorcorrector
algorithm
everi
iter
predict
made
solver
numer
inexpens
possibl
sinc
run
full
time
interv
usual
involv
coars
physic
andor
coars
resolut
correct
involv
expens
solver
highfidel
physic
high
resolut
propag
parallel
small
time
subdomain
classic
version
parar
fine
solver
fix
high
accuraci
across
iter
set
one
would
use
solv
dynam
desir
accuraci
pure
sequenti
solver
wellknown
point
major
obstacl
achiev
better
parallel
effici
paper
propos
adapt
variant
accuraci
fine
solver
increas
across
iter
main
goal
show
new
point
view
overcom
obstacl
cost
fine
solver
remain
factor
limit
high
perform
becom
cost
coars
solver
commun
time
refer
eg
contribut
lower
cost
coars
solver
present
section
new
adapt
point
view
requir
formul
ideal
version
parar
algorithm
infinit
dimension
function
space
fine
propag
replac
exact
one
section
sinc
scheme
obvious
implement
practic
formul
feasibl
perturb
version
involv
approxim
exact
propag
increas
accuraci
across
iter
section
accuraci
tighten
way
feasibl
adapt
algorithm
converg
rate
ideal
one
nearminim
numer
cost
identifi
toler
involv
quantiti
difficult
estim
practic
addit
may
optim
deriv
theoret
converg
analysi
base
abstract
condit
coars
fine
solver
bridg
gap
theori
actual
implement
propos
practic
guidelin
set
toler
next
explain
section
new
formul
invit
use
adapt
scheme
time
variabl
also
variabl
may
involv
dynam
perform
algorithm
could
also
enhanc
reus
inform
previou
iter
order
limit
cost
intern
solver
techniqu
strongli
depend
natur
specif
problem
discuss
common
situat
appendix
close
section
list
main
advantag
new
framework
classic
parar
paradigm
formul
optic
new
standpoint
parallel
perform
adapt
scheme
difficult
predict
priori
section
carri
discuss
show
alway
superior
classic
approach
ideal
situat
cost
coars
solver
commun
delay
neglig
show
algorithm
would
exhibit
high
parallel
effici
emphas
theori
gener
sens
applic
ode
also
pde
involv
time
space
possibl
variabl
defer
futur
work
present
numer
pde
exampl
sinc
requir
deploy
spacetim
adapt
method
challeng
topic
techniqu
usual
depend
specif
problem
natur
instead
illustr
perform
algorithm
stiff
ode
section
challeng
famili
problem
sourc
adapt
time
allow
use
inexpens
coars
solver
test
ode
brussel
van
der
pol
oregon
equat
seir
model
j
u
r
n
l
p
r
e
p
r
f
journal
preproof
j
u
r
n
l
p
r
e
p
r
f
journal
preproof
follow
use
term
solver
denot
particular
choic
ii
iii
given
solver
use
notat
exact
propag
e
express
w
approxim
e
w
certain
accuraci
word
write
w
e
w
j
u
r
n
l
p
r
e
p
r
f
journal
preproof
j
u
r
n
l
p
r
e
p
r
f
journal
preproof
j
u
r
n
l
p
r
e
p
r
f
journal
preproof
cost
cp
k
k
j
u
r
n
l
p
r
e
p
r
f
journal
preproof
error
fine
solver
everi
fine
timestep
j
u
r
n
l
p
r
e
p
r
f
journal
preproof
j
u
r
n
l
p
r
e
p
r
f
journal
preproof
j
u
r
n
l
p
r
e
p
r
f
journal
preproof
j
u
r
n
l
p
r
e
p
r
f
journal
preproof
j
u
r
n
l
p
r
e
p
r
f
journal
preproof
affili
given
yvon
maday
solv
complex
model
high
accuraci
within
reason
comput
time
motiv
search
numer
scheme
exploit
effici
parallel
comput
architectur
paper
model
consist
partial
differenti
equat
pde
set
domain
context
one
main
idea
parallel
simul
break
problem
subproblem
defin
subdomain
partit
domain
potenti
high
dimension
compos
differ
variabl
like
space
time
veloc
even
specif
variabl
problem
exist
algorithm
good
scalabl
properti
decomposit
spatial
variabl
ellipt
saddlepoint
problem
see
overview
said
decomposit
time
even
simpl
system
ode
despit
fact
research
time
domain
decomposit
current
activ
histori
least
year
back
least
sever
algorithm
explor
see
overview
consequ
time
domain
decomposit
date
secondari
option
come
decid
algorithmmethod
distribut
task
parallel
cluster
main
goal
work
address
effici
limit
framework
one
particular
scheme
parar
time
algorithm
method
first
introduc
recent
propos
model
spread
viru
wuhan
citi
area
code
reproduc
result
experi
ode
avail
onlin
first
two
exampl
rel
stiff
two
highli
stiff
serv
illustr
limit
approach
show
rel
stiff
problem
adapt
parar
algorithm
perform
time
better
classic
one
solut
approxim
high
accuraci
addit
confirm
two
exampl
remain
obstacl
achiev
competit
perform
cost
coars
solver
commun
time
processor
due
natur
algorithm
clear
overcom
limit
especi
one
come
coars
solver
issu
come
forefront
futur
research
sinc
two
highli
stiff
exampl
illustr
cost
coars
solver
may
even
prevent
obtain
speedup
show
could
find
inexpens
coars
solver
perhap
base
empir
data
good
backof
envelopp
calcul
adapt
algorithm
would
yield
interest
speedsup
even
highli
stiff
case
addit
improv
parallel
effici
except
cours
discuss
extrem
case
adapt
version
parar
bring
import
conceptu
novelti
field
time
domain
decomposit
one
error
control
comput
mean
deviat
numer
result
exact
continu
solut
certifi
quantifi
set
meet
given
target
accuraci
respect
problem
relev
norm
requir
formul
algorithm
infinit
dimension
level
done
paper
point
view
fundament
differ
fulli
discret
set
parar
algorithm
alway
thought
practic
first
fix
discret
often
uniform
grid
speedup
comput
discret
evolut
parar
way
rigor
control
error
respect
actual
continu
solut
systemat
procedur
minim
number
degre
freedom
conclud
introduct
bibliograph
remark
best
knowledg
current
abstract
broad
formul
adapt
version
parar
never
propos
literatur
howev
previou
work
instanti
varieti
particular
applic
idea
reus
inform
previou
parar
iter
either
purpos
improv
qualiti
fine
solver
build
initi
guess
intern
iter
routin
among
relev
one
stand
coupl
parar
algorithm
spatial
domain
decomposit
see
combin
parar
algorithm
iter
high
order
method
time
like
spectral
defer
correct
see
parar
also
combin
multigrid
iter
techniqu
addit
involv
hierarchi
spacetim
mesh
see
similar
spirit
also
cite
applic
parar
algorithm
solv
optim
control
problem
inform
previou
step
use
see
appendix
briefli
explain
sens
strategi
seen
particular
instanc
current
approach
viewpoint
could
help
give
solid
theoret
foundat
idea
reus
inform
start
guess
intern
iter
solver
also
discuss
appendix
explor
sever
differ
work
eg
provid
converg
analysi
simpl
situat
complet
analysi
propos
forthcom
work
section
introduc
preliminari
notat
section
formul
ideal
parar
scheme
infinit
dimension
function
set
section
present
feasibl
realiz
involv
fine
solver
whose
accuraci
adapt
increas
across
iter
section
prove
feasibl
adapt
algorithm
converg
rate
ideal
one
provid
toler
fine
solver
increas
certain
rate
discuss
final
discuss
new
paradigm
realiz
thank
adapt
scheme
andor
reus
inform
previou
step
section
appendix
section
connect
new
adapt
formul
classic
parar
algorithm
list
main
advantag
new
standpoint
let
u
banach
space
function
defin
domain
r
eg
u
l
let
propag
oper
given
time
function
w
u
e
w
take
w
initi
valu
time
propag
time
assum
e
satisfi
semi
group
properti
oper
u
u
adequ
regular
shall
detail
latter
given
w
u
e
w
denot
solut
time
initi
condit
w
time
problem
interest
studi
evolut
given
initi
condit
u
u
note
e
could
also
associ
discret
version
evolut
equat
defin
oper
necessari
relat
evolut
equat
see
sinc
gener
problem
explicit
solut
seek
approxim
given
target
accuraci
initi
valu
w
u
denot
e
w
element
u
approxim
e
w
follow
denot
norm
u
realiz
e
w
involv
three
main
ingredi
numer
scheme
discret
time
depend
problem
eg
euler
scheme
time
ii
certain
expect
error
size
associ
choic
discret
eg
error
associ
time
step
size
euler
scheme
iii
numer
implement
solv
result
discret
system
eg
conjug
gradient
newton
method
ssor
introduc
decomposit
time
interv
n
subinterv
n
n
n
n
without
loss
gener
take
uniform
size
n
mean
n
n
n
n
given
target
accuraci
primari
goal
parar
time
algorithm
build
classic
way
achiev
set
seq
sequenti
solver
u
sinc
come
cost
solv
whole
time
interv
main
goal
parar
time
algorithm
speed
comput
time
maintain
target
accuraci
made
possibl
first
decompos
comput
time
domain
instead
solv
perform
n
parallel
solv
interv
n
n
size
next
introduc
ideal
version
feasibl
practic
start
point
subsequ
implement
version
algorithm
reli
use
solver
g
known
coars
solver
follow
properti
involv
oper
e
g
exist
constant
g
c
c
c
function
x
u
note
hypothesi
classic
abstract
formul
properti
numer
scheme
relat
stabil
accuraci
hypothesi
lipschitz
condit
quantiti
g
small
constant
case
euler
scheme
would
equal
time
step
size
ideal
version
algorithm
consist
build
iter
seri
n
k
k
approxim
u
n
n
n
follow
recurs
formula
point
sever
comment
order
first
one
comput
n
k
requir
propag
e
interv
size
follow
given
iter
k
n
propag
size
requir
distinct
interv
n
n
size
independ
initi
condit
sinc
independ
comput
n
parallel
processor
origin
comput
decompos
parallel
comput
n
subinterv
size
second
observ
algorithm
may
implement
practic
involv
exact
propag
e
feasibl
instanti
consist
replac
e
n
n
k
approxim
e
n
n
k
n
k
certain
accuraci
n
k
care
chosen
come
point
next
section
third
observ
note
current
version
algorithm
n
n
exact
solut
u
n
obtain
exactli
k
n
parar
iter
number
reduc
look
approxim
solut
accuraci
depend
problem
final
number
iter
k
actual
much
smaller
n
converg
result
theorem
proof
help
understand
main
mechan
drive
converg
algorithm
explain
behavior
present
introduc
shorthand
notat
error
norm
u
n
c
e
g
proof
proof
spirit
exist
result
literatur
see
instruct
give
subsequ
develop
paper
introduc
follow
quantiti
shorthand
notat
proof
k
use
definit
n
n
n
use
deriv
second
last
inequ
k
start
take
norm
use
deriv
consid
sequenc
e
n
k
n
defin
recurs
follow
k
j
u
r
n
l
p
r
e
p
r
f
k
sinc
e
n
k
e
n
k
k
n
n
analyz
behavior
e
n
k
deriv
bound
e
n
k
consid
gener
function
get
identifi
term
n
expans
deriv
bound
henc
use
definit
end
proof
theorem
note
least
one
step
sharp
proof
step
replac
note
also
quantiti
drive
converg
speed
introduc
write
g
note
suffici
condit
converg
word
g
minim
accuraci
coars
solver
satisfi
order
guarante
converg
ideal
parar
algorithm
follow
work
assumpt
g
satisfi
see
next
section
g
play
also
critic
role
certain
converg
properti
perturb
algorithm
finish
section
discuss
behavior
g
depend
sever
scenario
first
c
c
c
lipschitz
constant
fix
properti
evolut
problem
could
potenti
larg
number
result
g
could
larg
number
condit
would
stringent
valu
g
small
long
time
simul
becom
larg
becom
small
compar
c
c
number
n
processor
becom
larg
feasibl
version
algorithm
involv
approxim
e
n
n
k
certain
accuraci
n
k
lead
consid
algorithm
form
sinc
feasibl
version
converg
better
rate
analyz
minim
accuraci
n
k
preserv
result
direct
given
follow
theorem
requir
introduc
quantiti
tend
p
let
k
given
posit
integ
let
us
make
coupl
remark
give
proof
theorem
first
suffici
condit
converg
minim
accuraci
requir
coars
solver
stronger
ideal
case
note
howev
g
small
roughli
g
condit
g
similar
ideal
perturb
case
second
compar
rate
feasibl
parar
algorithm
deviat
ideal
one
factor
g
play
critic
role
converg
properti
determin
whether
converg
close
ideal
rate
deviat
potenti
import
factor
proof
proof
follow
line
one
theorem
e
n
k
defin
exactli
addit
use
introduc
sequenc
concentr
case
k
sinc
case
k
ident
theorem
k
use
take
norm
use
definit
n
k
associ
gener
k
satisfi
replac
denomin
factor
use
binomi
expans
deriv
bound
use
g
coeffici
associ
term
n
give
definit
therefor
recal
definit
use
definit
last
line
inequ
end
proof
sinc
e
n
k
n
k
n
n
sinc
accuraci
n
k
need
improv
k
natur
way
build
approxima
adapt
techniqu
adapt
refin
everi
step
k
implement
ultim
rest
use
posteriori
error
estim
open
door
local
time
step
adapt
parar
algorithm
well
spatial
coarsen
refin
problem
involv
addit
spatial
variabl
principl
n
k
decreas
k
numer
cost
increas
term
degre
freedom
also
term
comput
time
actual
reveal
key
idea
new
approach
would
like
last
fine
solver
expens
cost
previou
one
small
fraction
cost
last
one
refer
next
subsect
precis
statement
reus
inform
previou
iter
limit
cost
intern
solver
requir
e
n
n
k
n
k
enhanc
speedup
depend
cours
natur
specif
problem
discuss
sever
common
situat
appendix
origin
version
algorithm
e
n
n
k
approxim
accuraci
n
k
f
kept
constant
n
across
parar
iter
k
usual
done
use
solver
f
defin
spirit
g
satisfi
hypothesi
better
accuraci
f
g
case
recov
classic
algorithm
see
compar
classic
version
parar
algorithm
adapt
approach
offer
follow
import
advantag
algorithm
converg
exact
solut
u
n
solut
achiev
fix
chosen
fine
solver
f
n
u
inde
n
n
k
k
final
target
accuraci
parallel
effici
alway
superior
classic
approach
see
section
minim
comput
ressourc
degre
freedom
identifi
minim
requir
accuraci
iter
see
equat
earli
iter
use
loos
toler
thu
avoid
unnecessari
work
due
oversolv
later
iter
use
tighter
toler
deliv
accuraci
dynam
refin
fine
solver
invit
incorpor
adapt
solver
posteriori
error
estim
parar
scheme
difficult
give
accur
priori
estim
speedup
effici
method
due
adapt
natur
actual
perform
establish
relev
exampl
section
give
result
case
brussel
system
despit
difficulti
estim
make
gener
remark
section
aim
primarili
highlight
relev
cost
coars
solver
speedup
defin
ratio
cost
run
sequenti
fine
solver
achiev
target
accuraci
cost
run
adapt
parar
algorithm
provid
end
target
accuraci
parallel
effici
method
defin
ratio
speed
number
processor
give
target
parallel
solver
assum
g
n
k
f
n
k
numer
cost
realiz
g
n
n
k
e
n
n
k
n
k
sinc
toler
n
k
decreas
k
f
n
f
n
k
neglect
commun
delay
cost
adapt
solver
classic
parar
algorithm
involv
everi
iter
k
k
propag
highest
accuraci
n
k
thu
cost
directli
follow
least
obviou
notat
k
ap
k
cp
thu
parallel
perform
adapt
algorithm
least
one
classic
version
note
hold
even
commun
neglig
sinc
amount
inform
exchang
algorithm
next
give
quantit
statement
admittedli
ideal
set
assum
cost
coars
solv
neglig
commun
delay
cost
realiz
e
assumpt
cost
instanc
reason
use
explicit
timestep
method
order
would
also
hold
implicit
method
direct
solver
use
note
could
actual
depend
k
stick
simpl
model
clariti
exposit
proof
cost
scalabl
adapt
parar
scheme
k
iter
sinc
rang
scheme
converg
quantiti
max
n
k
bound
thu
exist
c
c
c
k
c
k
account
notat
k
note
fact
c
c
close
one
let
us
start
simpl
case
denot
k
k
gener
case
true
last
factor
current
conclus
global
cost
parar
procedur
equal
last
fine
solver
subinterv
size
coars
previou
fine
propag
neglig
sinc
accuraci
obtain
end
parar
procedur
see
order
accuraci
provid
classic
parar
solver
compar
follow
take
last
target
accuraci
k
adapt
algorithm
accuraci
fine
scheme
classic
parar
algorithm
cost
would
therefor
addit
know
cost
coars
solver
neglig
divid
yield
ideal
set
proposit
parallel
effici
adapt
parar
algorithm
depend
final
number
iter
contrast
classic
version
whose
effici
decreas
final
number
iter
k
effici
behav
like
g
adapt
version
g
rapidli
goe
zero
g
soon
g
becom
neglig
respect
rang
full
scalabl
emphas
obvious
ideal
set
never
hold
practic
result
interest
right
sinc
highlight
cost
fine
solver
longer
main
obstacl
full
scalabl
adapt
set
cost
coars
solver
becom
major
obstruct
toward
full
effici
practic
choic
n
k
formula
converg
analysi
section
give
estim
n
k
one
could
principl
use
implement
howev
toler
may
optim
deriv
theoret
converg
analysi
base
abstract
condit
coars
fine
solver
confirm
numer
test
observ
use
estim
n
k
deliv
satisfactori
enough
result
reason
necessari
devis
practic
rule
set
n
k
explor
follow
choic
final
target
accuraci
classic
parar
algorithm
usual
run
solver
deliv
slightli
higher
accuraci
say
assum
classic
algorithm
converg
k
cp
k
iter
propos
build
toler
n
k
way
target
k
ap
k
cp
cost
last
fine
propag
order
sum
previou
one
motiv
set
numer
exampl
next
section
use
toler
load
balanc
simplic
exposit
algorithm
far
discuss
n
subinterv
uniform
size
howev
decomposit
may
lead
task
imbal
time
interv
may
complex
dynam
other
requir
degre
freedom
thu
comput
time
order
balanc
task
effici
possibl
dynam
adapt
size
n
subinterv
way
fine
solver
propag
balanc
possibl
among
processor
appli
adapt
algorithm
sever
stiff
ode
mecan
adapt
time
result
illustr
approach
improv
speedup
effici
respect
classic
nonadapt
parar
method
also
show
main
element
affect
perform
longer
cost
fine
solver
cost
coars
solver
extrem
case
cost
may
even
prevent
speedup
see
section
put
obstruct
forefront
futur
research
code
reproduc
numer
result
avail
onlin
http
plmlabmathcnrsfrmulahernandezpararealadapt
ode
easili
test
indic
instruct
note
algorithm
could
also
appli
pde
defer
present
numer
exampl
futur
work
sinc
requir
full
spacetim
adapt
techniqu
topic
sinc
challeng
formul
deploy
specif
type
problem
consid
brussel
system
initi
condit
x
stiff
ode
model
chain
chemic
reaction
alreadi
studi
previou
work
parar
algorithm
see
system
fix
point
x
ba
becom
unstabl
b
lead
oscil
place
oscillatori
regim
set
b
dynam
present
larg
veloc
variat
time
subinterv
make
use
adapt
timestep
scheme
particularli
desir
appropri
treatment
transient
coars
solver
set
g
use
explicit
rung
kutta
method
order
adapt
timestep
see
fine
solver
use
implicit
rungekutta
method
radau
iia
famili
order
adapt
timestep
see
integr
avail
ode
integr
librari
scipi
use
librari
alreadi
discuss
target
accuraci
n
k
ensur
rigor
posteriori
error
estim
howev
type
estim
unfortun
avail
scipi
librari
awar
mainstream
librari
capabl
surrog
use
mention
classic
ode
integr
guarante
local
accuraci
timestep
n
global
accuraci
macro
interv
n
n
compos
sever
timestep
local
accuraci
specifi
librari
routin
via
paramet
atol
rtol
function
scipyintegratesolveivp
relat
local
accuraci
control
global
one
built
priori
chart
map
accuraci
solver
macrointerv
toler
paramet
atol
rtol
librari
simplifi
two
paramet
set
equal
atol
rtol
valu
fix
accord
chart
exampl
provid
chart
scheme
fine
solver
figur
dot
comput
valu
given
valu
paramet
atol
examin
accuraci
solver
interpol
point
cubic
spline
interpol
way
given
intermedi
accuraci
n
k
parar
algorithm
easili
adapt
paramet
valu
atol
requir
use
formula
compar
speedup
classic
adapt
parar
algorithm
term
number
oper
involv
numer
solut
commun
delay
taken
account
cost
g
n
k
f
n
k
take
account
number
time
step
adapt
increas
tightn
accuraci
number
righthand
side
evalu
fine
solver
addit
count
number
evalu
jacobian
matrix
number
linear
system
invers
figur
plot
obtain
speedup
differ
configur
final
time
vari
final
target
accuraci
number
processor
n
vari
anticip
section
speedup
adapt
parar
alway
superior
one
classic
parar
observ
gain
margin
moder
accuraci
time
larger
note
sometim
speedup
increas
monoton
number
processor
n
increas
also
speedup
gener
increas
n
increas
rather
moder
valu
significantli
differ
rang
full
scalabl
next
explain
mainli
due
cost
coars
solver
sinc
problem
stiff
consid
rel
long
time
interv
necessari
use
suffici
accur
coars
solver
explain
choic
explicit
rungekutta
scheme
order
illustr
impact
cost
let
us
fix
n
paramet
would
yield
similar
conclus
compar
speedup
effici
count
count
cost
coars
solver
tabl
obvious
count
cost
coars
solver
perform
algorithm
improv
particularli
increas
case
adapt
version
cost
g
neglig
would
deliv
satisfactori
effici
five
time
larger
classic
parar
would
yield
analysi
illustr
major
obstacl
achiev
competit
scalabl
longer
cost
fine
solver
like
classic
version
cost
coars
propag
next
give
insight
differ
converg
behavior
algorithm
fix
n
plot
figur
converg
histori
parar
solut
term
classic
maximum
error
parar
solut
macrointerv
note
maximum
error
adapt
scheme
steadili
decreas
desir
accuraci
wherea
error
classic
scheme
degrad
iter
k
converg
type
behavior
observ
configur
conjectur
import
differ
accuraci
coars
fine
solver
earli
stage
algorithm
may
caus
final
inspect
error
fine
solver
show
adapt
algorithm
succe
reduc
error
everi
time
much
uniform
way
classic
algorithm
next
consid
van
der
pol
oscil
initi
condit
x
equat
simpl
nonstiff
harmon
oscil
system
limit
cycl
becom
stiffer
stiffer
valu
increas
test
set
alreadi
rel
stiff
case
like
exampl
brussel
system
set
g
coars
solver
use
explicit
rung
kutta
method
order
adapt
timestep
see
fine
solver
use
implicit
rungekutta
method
radau
iia
famili
order
adapt
timestep
figur
plot
obtain
speedup
differ
configur
final
time
final
target
accuraci
number
processor
n
vari
like
previou
exampl
adapt
algorithm
outperform
nonadapt
version
term
speedup
howev
gain
margin
moder
accuraci
high
accuraci
adapt
algorithm
improv
speedup
factor
time
respect
classic
one
improv
signific
larg
tabl
illustr
coars
solver
main
bottleneck
reach
high
parallel
effici
adapt
algorithm
examin
speedup
effici
n
take
take
account
cost
coars
solver
extrem
case
cost
coars
solver
may
prevent
speedup
see
section
put
obstruct
forefront
futur
research
promin
case
highli
stiff
ode
provid
code
observ
fact
case
oregon
system
equat
view
ongo
pandem
time
articl
written
also
test
seir
epidem
model
recent
propos
classic
run
parar
algorithm
latter
model
integr
type
lsoda
coars
fine
solver
seem
well
adapt
sinc
altern
adam
bdf
integr
nonstiff
stiff
part
automat
stiff
detect
reach
target
accuraci
necessari
set
g
make
cost
coars
solver
expens
yield
parallel
effici
howev
could
find
inexpens
coars
solver
perhap
base
empir
data
good
backof
envelopp
calcul
adapt
parar
algorithm
would
yield
interest
speedsup
exampl
n
processor
would
get
speedup
versu
nonadapt
version
new
adapt
formul
parar
algorithm
open
door
improv
significantli
parallel
effici
method
provid
cost
coars
solver
moder
increas
target
toler
met
step
allow
use
onlin
stop
criteria
involv
posteriori
estim
develop
methodolog
remain
theoret
sinc
quantifi
impact
commun
delay
processor
potenti
memori
issu
note
howev
load
balanc
devis
purpos
equilibr
task
memori
framework
anr
project
work
issu
differ
level
theori
involv
differ
j
u
r
n
l
p
r
e
p
r
f
collabor
topic
anoth
paper
addit
sever
extens
base
current
find
subject
ongo
work
particular
coupl
adapt
parar
adapt
spacetim
scheme
coupl
parar
intern
iter
solver
like
discuss
section
appendix
also
develop
inexpens
coars
solver
work
fund
anr
project
usual
solver
realiz
e
n
n
k
n
k
built
use
n
k
n
n
k
input
inform
account
idea
notat
numer
cost
denot
cost
n
k
increas
n
k
tighten
section
discuss
enhanc
gain
effici
adapt
algorithm
discuss
way
increas
accuraci
solver
e
n
n
k
n
k
across
iter
maintain
cost
realiz
independ
possibl
n
k
n
k
one
possibl
enrich
n
k
data
produc
previou
parar
iter
although
would
cours
cost
increas
storag
requir
let
p
n
k
denot
intermedi
inform
produc
iter
k
n
n
p
k
n
n
p
n
k
inform
produc
step
k
use
p
k
p
p
input
inform
idea
see
whether
could
possibl
find
solver
constant
small
complex
cost
note
use
enrich
set
inform
n
k
mean
want
learn
previou
approxim
u
n
given
e
n
n
p
n
p
p
k
start
current
algorithm
closer
u
n
parar
iter
thu
improv
accuraci
without
increas
work
solv
start
better
input
accumul
previou
parar
iter
rest
section
describ
three
relev
scenario
approxim
e
n
n
k
tri
build
scheme
spirit
first
two
exampl
alreadi
present
literatur
concern
coupl
parar
spatial
domain
decomposit
section
iter
highord
time
integr
scheme
section
two
case
date
complet
converg
analysi
sinc
remain
show
e
n
n
k
approxim
accuraci
k
ii
cost
solver
realli
constant
parar
step
addit
two
applic
mention
third
scenario
converg
analysi
fulli
proven
concern
solut
timedepend
problem
involv
intern
iter
scheme
everi
time
step
idea
first
analyz
restrict
set
also
appli
framework
mgrit
algorithm
coupl
parar
multigrid
iter
scheme
see
section
give
main
set
defer
analysi
forthcom
paper
consid
solver
ddm
involv
spatial
domain
decomposit
n
n
assum
ddm
involv
time
discret
small
time
step
let
n
number
time
step
interv
n
n
relat
n
n
total
number
time
step
n
n
n
domain
decomposit
iter
act
partit
l
l
domain
n
n
denot
u
n
n
j
k
solut
produc
ddm
time
n
j
domain
decomposit
iter
notat
j
denot
last
iter
fix
accord
stop
criterion
j
iter
need
initi
interfac
l
l
l
idea
explor
eg
take
valu
u
n
n
j
l
interfac
start
guess
n
n
cost
much
small
cost
fine
solver
spectral
defer
correct
sdc
iter
time
integr
scheme
start
initi
guess
u
discret
point
method
add
success
correct
guess
correct
found
solv
associ
evolut
equat
certain
condit
correct
everi
step
increas
one
accuraci
order
time
discret
carri
simplifi
discuss
build
e
n
n
k
n
k
sdc
connect
socal
parallel
full
approxim
scheme
spacetim
pfasst
speedup
comput
one
key
element
choic
start
guess
u
n
k
n
n
without
enter
specif
detail
pfasst
algorithm
particular
instanti
scheme
j
u
n
k
use
inform
produc
previou
parar
iter
k
therefor
pfasst
fall
present
framework
sens
produc
addit
compon
pfasst
algorithm
also
tri
improv
accuraci
coars
solver
g
use
sdc
iter
built
k
n
taken
account
adapt
parar
algorithm
anoth
algorithm
progress
improv
qualiti
fine
solver
across
iter
mgrit
coupl
parar
multigrid
iter
method
see
pfasst
algorithm
also
coupl
multigrid
techniqu
implicit
discret
problem
lead
discret
linear
nonlinear
system
equat
often
solv
iter
scheme
involv
intern
iter
within
parar
algorithm
one
could
tri
speed
build
good
initi
guess
base
inform
previou
parar
iter
illustr
idea
simpl
case
linear
differenti
oper
u
complement
suitabl
boundari
condit
use
implicit
euler
scheme
time
discret
sequenti
solut
problem
note
b
depend
time
notat
account
order
overload
notat
discret
u
problem
classic
reduc
solv
linear
system
form
n
n
n
n
n
n
discret
subspac
u
usual
system
solv
either
mean
conjug
gradient
method
richardson
iter
form
n
n
j
id
n
n
j
u
n
given
suitabl
chosen
relax
paramet
p
seen
precondition
intern
iter
j
stop
whenev
certain
criterion
met
could
posteriori
estim
denot
j
n
n
final
number
obvious
j
n
n
depend
start
guess
usual
choic
take
solut
previou
time
u
n
n
j
n
j
u
r
n
l
p
r
e
p
r
f
order
achiev
goal
ie
maintan
low
cost
increas
accuraci
parar
step
reus
inform
previou
parar
iter
start
guess
two
option
explor
first
k
first
case
take
intern
iter
point
stop
previou
parar
iter
k
addit
second
case
term
tri
better
take
dynam
process
account
note
use
solut
produc
previou
parar
iter
expens
addit
memori
requir
might
also
cost
certain
increas
complex
local
certain
time
howev
show
restrict
set
start
guess
particular
second
interest
potenti
enhanc
speedup
parar
algorithm
gener
theori
aspect
present
forthcom
work
